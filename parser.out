Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     block -> statement
Rule 5     block -> statement_list
Rule 6     statement -> ID EQUALS expr NEWLINE
Rule 7     statement -> PRINT LPAREN expr RPAREN NEWLINE
Rule 8     statement -> IF expr COLON NEWLINE block
Rule 9     statement -> IF expr COLON NEWLINE block ELSE COLON NEWLINE block
Rule 10    statement -> FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block
Rule 11    expr -> expr EQEQ expr
Rule 12    expr -> expr NEQ expr
Rule 13    expr -> expr GT expr
Rule 14    expr -> expr LT expr
Rule 15    expr -> expr GEQ expr
Rule 16    expr -> expr LEQ expr
Rule 17    expr -> expr AND expr
Rule 18    expr -> expr OR expr
Rule 19    expr -> expr PLUS expr
Rule 20    expr -> expr MINUS expr
Rule 21    expr -> expr TIMES expr
Rule 22    expr -> expr DIVIDE expr
Rule 23    expr -> NUMBER
Rule 24    expr -> FLOAT
Rule 25    expr -> ID
Rule 26    expr -> STRING
Rule 27    expr -> TRUE
Rule 28    expr -> FALSE
Rule 29    expr -> LPAREN expr RPAREN
Rule 30    expr -> expr COMMA expr

Terminals, with rules where they appear

AND                  : 17
COLON                : 8 9 9 10
COMMA                : 30
DIVIDE               : 22
ELSE                 : 9
EQEQ                 : 11
EQUALS               : 6
FALSE                : 28
FLOAT                : 24
FOR                  : 10
GEQ                  : 15
GT                   : 13
ID                   : 6 10 25
IF                   : 8 9
IN                   : 10
LEQ                  : 16
LPAREN               : 7 10 29
LT                   : 14
MINUS                : 20
NEQ                  : 12
NEWLINE              : 6 7 8 9 9 10
NUMBER               : 23
OR                   : 18
PLUS                 : 19
PRINT                : 7
RANGE                : 10
RPAREN               : 7 10 29
STRING               : 26
TIMES                : 21
TRUE                 : 27
error                : 

Nonterminals, with rules where they appear

block                : 8 9 9 10
expr                 : 6 7 8 9 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 29 30 30
program              : 0
statement            : 2 3 4
statement_list       : 1 3 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (6) statement -> . ID EQUALS expr NEWLINE
    (7) statement -> . PRINT LPAREN expr RPAREN NEWLINE
    (8) statement -> . IF expr COLON NEWLINE block
    (9) statement -> . IF expr COLON NEWLINE block ELSE COLON NEWLINE block
    (10) statement -> . FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block

    ID              shift and go to state 4
    PRINT           shift and go to state 5
    IF              shift and go to state 6
    FOR             shift and go to state 7

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (6) statement -> . ID EQUALS expr NEWLINE
    (7) statement -> . PRINT LPAREN expr RPAREN NEWLINE
    (8) statement -> . IF expr COLON NEWLINE block
    (9) statement -> . IF expr COLON NEWLINE block ELSE COLON NEWLINE block
    (10) statement -> . FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 4
    PRINT           shift and go to state 5
    IF              shift and go to state 6
    FOR             shift and go to state 7

    statement                      shift and go to state 8

state 3

    (2) statement_list -> statement .

    ID              reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    FOR             reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 4

    (6) statement -> ID . EQUALS expr NEWLINE

    EQUALS          shift and go to state 9


state 5

    (7) statement -> PRINT . LPAREN expr RPAREN NEWLINE

    LPAREN          shift and go to state 10


state 6

    (8) statement -> IF . expr COLON NEWLINE block
    (9) statement -> IF . expr COLON NEWLINE block ELSE COLON NEWLINE block
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 11

state 7

    (10) statement -> FOR . ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block

    ID              shift and go to state 19


state 8

    (3) statement_list -> statement_list statement .

    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    FOR             reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 3 (statement_list -> statement_list statement .)


state 9

    (6) statement -> ID EQUALS . expr NEWLINE
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 20

state 10

    (7) statement -> PRINT LPAREN . expr RPAREN NEWLINE
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 21

state 11

    (8) statement -> IF expr . COLON NEWLINE block
    (9) statement -> IF expr . COLON NEWLINE block ELSE COLON NEWLINE block
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           shift and go to state 22
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    COMMA           shift and go to state 35


state 12

    (23) expr -> NUMBER .

    COLON           reduce using rule 23 (expr -> NUMBER .)
    EQEQ            reduce using rule 23 (expr -> NUMBER .)
    NEQ             reduce using rule 23 (expr -> NUMBER .)
    GT              reduce using rule 23 (expr -> NUMBER .)
    LT              reduce using rule 23 (expr -> NUMBER .)
    GEQ             reduce using rule 23 (expr -> NUMBER .)
    LEQ             reduce using rule 23 (expr -> NUMBER .)
    AND             reduce using rule 23 (expr -> NUMBER .)
    OR              reduce using rule 23 (expr -> NUMBER .)
    PLUS            reduce using rule 23 (expr -> NUMBER .)
    MINUS           reduce using rule 23 (expr -> NUMBER .)
    TIMES           reduce using rule 23 (expr -> NUMBER .)
    DIVIDE          reduce using rule 23 (expr -> NUMBER .)
    COMMA           reduce using rule 23 (expr -> NUMBER .)
    NEWLINE         reduce using rule 23 (expr -> NUMBER .)
    RPAREN          reduce using rule 23 (expr -> NUMBER .)


state 13

    (24) expr -> FLOAT .

    COLON           reduce using rule 24 (expr -> FLOAT .)
    EQEQ            reduce using rule 24 (expr -> FLOAT .)
    NEQ             reduce using rule 24 (expr -> FLOAT .)
    GT              reduce using rule 24 (expr -> FLOAT .)
    LT              reduce using rule 24 (expr -> FLOAT .)
    GEQ             reduce using rule 24 (expr -> FLOAT .)
    LEQ             reduce using rule 24 (expr -> FLOAT .)
    AND             reduce using rule 24 (expr -> FLOAT .)
    OR              reduce using rule 24 (expr -> FLOAT .)
    PLUS            reduce using rule 24 (expr -> FLOAT .)
    MINUS           reduce using rule 24 (expr -> FLOAT .)
    TIMES           reduce using rule 24 (expr -> FLOAT .)
    DIVIDE          reduce using rule 24 (expr -> FLOAT .)
    COMMA           reduce using rule 24 (expr -> FLOAT .)
    NEWLINE         reduce using rule 24 (expr -> FLOAT .)
    RPAREN          reduce using rule 24 (expr -> FLOAT .)


state 14

    (25) expr -> ID .

    COLON           reduce using rule 25 (expr -> ID .)
    EQEQ            reduce using rule 25 (expr -> ID .)
    NEQ             reduce using rule 25 (expr -> ID .)
    GT              reduce using rule 25 (expr -> ID .)
    LT              reduce using rule 25 (expr -> ID .)
    GEQ             reduce using rule 25 (expr -> ID .)
    LEQ             reduce using rule 25 (expr -> ID .)
    AND             reduce using rule 25 (expr -> ID .)
    OR              reduce using rule 25 (expr -> ID .)
    PLUS            reduce using rule 25 (expr -> ID .)
    MINUS           reduce using rule 25 (expr -> ID .)
    TIMES           reduce using rule 25 (expr -> ID .)
    DIVIDE          reduce using rule 25 (expr -> ID .)
    COMMA           reduce using rule 25 (expr -> ID .)
    NEWLINE         reduce using rule 25 (expr -> ID .)
    RPAREN          reduce using rule 25 (expr -> ID .)


state 15

    (26) expr -> STRING .

    COLON           reduce using rule 26 (expr -> STRING .)
    EQEQ            reduce using rule 26 (expr -> STRING .)
    NEQ             reduce using rule 26 (expr -> STRING .)
    GT              reduce using rule 26 (expr -> STRING .)
    LT              reduce using rule 26 (expr -> STRING .)
    GEQ             reduce using rule 26 (expr -> STRING .)
    LEQ             reduce using rule 26 (expr -> STRING .)
    AND             reduce using rule 26 (expr -> STRING .)
    OR              reduce using rule 26 (expr -> STRING .)
    PLUS            reduce using rule 26 (expr -> STRING .)
    MINUS           reduce using rule 26 (expr -> STRING .)
    TIMES           reduce using rule 26 (expr -> STRING .)
    DIVIDE          reduce using rule 26 (expr -> STRING .)
    COMMA           reduce using rule 26 (expr -> STRING .)
    NEWLINE         reduce using rule 26 (expr -> STRING .)
    RPAREN          reduce using rule 26 (expr -> STRING .)


state 16

    (27) expr -> TRUE .

    COLON           reduce using rule 27 (expr -> TRUE .)
    EQEQ            reduce using rule 27 (expr -> TRUE .)
    NEQ             reduce using rule 27 (expr -> TRUE .)
    GT              reduce using rule 27 (expr -> TRUE .)
    LT              reduce using rule 27 (expr -> TRUE .)
    GEQ             reduce using rule 27 (expr -> TRUE .)
    LEQ             reduce using rule 27 (expr -> TRUE .)
    AND             reduce using rule 27 (expr -> TRUE .)
    OR              reduce using rule 27 (expr -> TRUE .)
    PLUS            reduce using rule 27 (expr -> TRUE .)
    MINUS           reduce using rule 27 (expr -> TRUE .)
    TIMES           reduce using rule 27 (expr -> TRUE .)
    DIVIDE          reduce using rule 27 (expr -> TRUE .)
    COMMA           reduce using rule 27 (expr -> TRUE .)
    NEWLINE         reduce using rule 27 (expr -> TRUE .)
    RPAREN          reduce using rule 27 (expr -> TRUE .)


state 17

    (28) expr -> FALSE .

    COLON           reduce using rule 28 (expr -> FALSE .)
    EQEQ            reduce using rule 28 (expr -> FALSE .)
    NEQ             reduce using rule 28 (expr -> FALSE .)
    GT              reduce using rule 28 (expr -> FALSE .)
    LT              reduce using rule 28 (expr -> FALSE .)
    GEQ             reduce using rule 28 (expr -> FALSE .)
    LEQ             reduce using rule 28 (expr -> FALSE .)
    AND             reduce using rule 28 (expr -> FALSE .)
    OR              reduce using rule 28 (expr -> FALSE .)
    PLUS            reduce using rule 28 (expr -> FALSE .)
    MINUS           reduce using rule 28 (expr -> FALSE .)
    TIMES           reduce using rule 28 (expr -> FALSE .)
    DIVIDE          reduce using rule 28 (expr -> FALSE .)
    COMMA           reduce using rule 28 (expr -> FALSE .)
    NEWLINE         reduce using rule 28 (expr -> FALSE .)
    RPAREN          reduce using rule 28 (expr -> FALSE .)


state 18

    (29) expr -> LPAREN . expr RPAREN
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 36

state 19

    (10) statement -> FOR ID . IN RANGE LPAREN expr RPAREN COLON NEWLINE block

    IN              shift and go to state 37


state 20

    (6) statement -> ID EQUALS expr . NEWLINE
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    NEWLINE         shift and go to state 38
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    COMMA           shift and go to state 35


state 21

    (7) statement -> PRINT LPAREN expr . RPAREN NEWLINE
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    RPAREN          shift and go to state 39
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    COMMA           shift and go to state 35


state 22

    (8) statement -> IF expr COLON . NEWLINE block
    (9) statement -> IF expr COLON . NEWLINE block ELSE COLON NEWLINE block

    NEWLINE         shift and go to state 40


state 23

    (11) expr -> expr EQEQ . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 41

state 24

    (12) expr -> expr NEQ . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 42

state 25

    (13) expr -> expr GT . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 43

state 26

    (14) expr -> expr LT . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 44

state 27

    (15) expr -> expr GEQ . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 45

state 28

    (16) expr -> expr LEQ . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 46

state 29

    (17) expr -> expr AND . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 47

state 30

    (18) expr -> expr OR . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 48

state 31

    (19) expr -> expr PLUS . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 49

state 32

    (20) expr -> expr MINUS . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 50

state 33

    (21) expr -> expr TIMES . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 51

state 34

    (22) expr -> expr DIVIDE . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 52

state 35

    (30) expr -> expr COMMA . expr
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 53

state 36

    (29) expr -> LPAREN expr . RPAREN
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    RPAREN          shift and go to state 54
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    COMMA           shift and go to state 35


state 37

    (10) statement -> FOR ID IN . RANGE LPAREN expr RPAREN COLON NEWLINE block

    RANGE           shift and go to state 55


state 38

    (6) statement -> ID EQUALS expr NEWLINE .

    ID              reduce using rule 6 (statement -> ID EQUALS expr NEWLINE .)
    PRINT           reduce using rule 6 (statement -> ID EQUALS expr NEWLINE .)
    IF              reduce using rule 6 (statement -> ID EQUALS expr NEWLINE .)
    FOR             reduce using rule 6 (statement -> ID EQUALS expr NEWLINE .)
    $end            reduce using rule 6 (statement -> ID EQUALS expr NEWLINE .)
    ELSE            reduce using rule 6 (statement -> ID EQUALS expr NEWLINE .)


state 39

    (7) statement -> PRINT LPAREN expr RPAREN . NEWLINE

    NEWLINE         shift and go to state 56


state 40

    (8) statement -> IF expr COLON NEWLINE . block
    (9) statement -> IF expr COLON NEWLINE . block ELSE COLON NEWLINE block
    (4) block -> . statement
    (5) block -> . statement_list
    (6) statement -> . ID EQUALS expr NEWLINE
    (7) statement -> . PRINT LPAREN expr RPAREN NEWLINE
    (8) statement -> . IF expr COLON NEWLINE block
    (9) statement -> . IF expr COLON NEWLINE block ELSE COLON NEWLINE block
    (10) statement -> . FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement

    ID              shift and go to state 4
    PRINT           shift and go to state 5
    IF              shift and go to state 6
    FOR             shift and go to state 7

    block                          shift and go to state 57
    statement                      shift and go to state 58
    statement_list                 shift and go to state 59

state 41

    (11) expr -> expr EQEQ expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 11 (expr -> expr EQEQ expr .)
    EQEQ            reduce using rule 11 (expr -> expr EQEQ expr .)
    NEQ             reduce using rule 11 (expr -> expr EQEQ expr .)
    GT              reduce using rule 11 (expr -> expr EQEQ expr .)
    LT              reduce using rule 11 (expr -> expr EQEQ expr .)
    GEQ             reduce using rule 11 (expr -> expr EQEQ expr .)
    LEQ             reduce using rule 11 (expr -> expr EQEQ expr .)
    AND             reduce using rule 11 (expr -> expr EQEQ expr .)
    OR              reduce using rule 11 (expr -> expr EQEQ expr .)
    PLUS            reduce using rule 11 (expr -> expr EQEQ expr .)
    MINUS           reduce using rule 11 (expr -> expr EQEQ expr .)
    TIMES           reduce using rule 11 (expr -> expr EQEQ expr .)
    DIVIDE          reduce using rule 11 (expr -> expr EQEQ expr .)
    COMMA           reduce using rule 11 (expr -> expr EQEQ expr .)
    NEWLINE         reduce using rule 11 (expr -> expr EQEQ expr .)
    RPAREN          reduce using rule 11 (expr -> expr EQEQ expr .)

  ! EQEQ            [ shift and go to state 23 ]
  ! NEQ             [ shift and go to state 24 ]
  ! GT              [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GEQ             [ shift and go to state 27 ]
  ! LEQ             [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! COMMA           [ shift and go to state 35 ]


state 42

    (12) expr -> expr NEQ expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 12 (expr -> expr NEQ expr .)
    EQEQ            reduce using rule 12 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 12 (expr -> expr NEQ expr .)
    GT              reduce using rule 12 (expr -> expr NEQ expr .)
    LT              reduce using rule 12 (expr -> expr NEQ expr .)
    GEQ             reduce using rule 12 (expr -> expr NEQ expr .)
    LEQ             reduce using rule 12 (expr -> expr NEQ expr .)
    AND             reduce using rule 12 (expr -> expr NEQ expr .)
    OR              reduce using rule 12 (expr -> expr NEQ expr .)
    PLUS            reduce using rule 12 (expr -> expr NEQ expr .)
    MINUS           reduce using rule 12 (expr -> expr NEQ expr .)
    TIMES           reduce using rule 12 (expr -> expr NEQ expr .)
    DIVIDE          reduce using rule 12 (expr -> expr NEQ expr .)
    COMMA           reduce using rule 12 (expr -> expr NEQ expr .)
    NEWLINE         reduce using rule 12 (expr -> expr NEQ expr .)
    RPAREN          reduce using rule 12 (expr -> expr NEQ expr .)

  ! EQEQ            [ shift and go to state 23 ]
  ! NEQ             [ shift and go to state 24 ]
  ! GT              [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GEQ             [ shift and go to state 27 ]
  ! LEQ             [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! COMMA           [ shift and go to state 35 ]


state 43

    (13) expr -> expr GT expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 13 (expr -> expr GT expr .)
    EQEQ            reduce using rule 13 (expr -> expr GT expr .)
    NEQ             reduce using rule 13 (expr -> expr GT expr .)
    GT              reduce using rule 13 (expr -> expr GT expr .)
    LT              reduce using rule 13 (expr -> expr GT expr .)
    GEQ             reduce using rule 13 (expr -> expr GT expr .)
    LEQ             reduce using rule 13 (expr -> expr GT expr .)
    AND             reduce using rule 13 (expr -> expr GT expr .)
    OR              reduce using rule 13 (expr -> expr GT expr .)
    PLUS            reduce using rule 13 (expr -> expr GT expr .)
    MINUS           reduce using rule 13 (expr -> expr GT expr .)
    TIMES           reduce using rule 13 (expr -> expr GT expr .)
    DIVIDE          reduce using rule 13 (expr -> expr GT expr .)
    COMMA           reduce using rule 13 (expr -> expr GT expr .)
    NEWLINE         reduce using rule 13 (expr -> expr GT expr .)
    RPAREN          reduce using rule 13 (expr -> expr GT expr .)

  ! EQEQ            [ shift and go to state 23 ]
  ! NEQ             [ shift and go to state 24 ]
  ! GT              [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GEQ             [ shift and go to state 27 ]
  ! LEQ             [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! COMMA           [ shift and go to state 35 ]


state 44

    (14) expr -> expr LT expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 14 (expr -> expr LT expr .)
    EQEQ            reduce using rule 14 (expr -> expr LT expr .)
    NEQ             reduce using rule 14 (expr -> expr LT expr .)
    GT              reduce using rule 14 (expr -> expr LT expr .)
    LT              reduce using rule 14 (expr -> expr LT expr .)
    GEQ             reduce using rule 14 (expr -> expr LT expr .)
    LEQ             reduce using rule 14 (expr -> expr LT expr .)
    AND             reduce using rule 14 (expr -> expr LT expr .)
    OR              reduce using rule 14 (expr -> expr LT expr .)
    PLUS            reduce using rule 14 (expr -> expr LT expr .)
    MINUS           reduce using rule 14 (expr -> expr LT expr .)
    TIMES           reduce using rule 14 (expr -> expr LT expr .)
    DIVIDE          reduce using rule 14 (expr -> expr LT expr .)
    COMMA           reduce using rule 14 (expr -> expr LT expr .)
    NEWLINE         reduce using rule 14 (expr -> expr LT expr .)
    RPAREN          reduce using rule 14 (expr -> expr LT expr .)

  ! EQEQ            [ shift and go to state 23 ]
  ! NEQ             [ shift and go to state 24 ]
  ! GT              [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GEQ             [ shift and go to state 27 ]
  ! LEQ             [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! COMMA           [ shift and go to state 35 ]


state 45

    (15) expr -> expr GEQ expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 15 (expr -> expr GEQ expr .)
    EQEQ            reduce using rule 15 (expr -> expr GEQ expr .)
    NEQ             reduce using rule 15 (expr -> expr GEQ expr .)
    GT              reduce using rule 15 (expr -> expr GEQ expr .)
    LT              reduce using rule 15 (expr -> expr GEQ expr .)
    GEQ             reduce using rule 15 (expr -> expr GEQ expr .)
    LEQ             reduce using rule 15 (expr -> expr GEQ expr .)
    AND             reduce using rule 15 (expr -> expr GEQ expr .)
    OR              reduce using rule 15 (expr -> expr GEQ expr .)
    PLUS            reduce using rule 15 (expr -> expr GEQ expr .)
    MINUS           reduce using rule 15 (expr -> expr GEQ expr .)
    TIMES           reduce using rule 15 (expr -> expr GEQ expr .)
    DIVIDE          reduce using rule 15 (expr -> expr GEQ expr .)
    COMMA           reduce using rule 15 (expr -> expr GEQ expr .)
    NEWLINE         reduce using rule 15 (expr -> expr GEQ expr .)
    RPAREN          reduce using rule 15 (expr -> expr GEQ expr .)

  ! EQEQ            [ shift and go to state 23 ]
  ! NEQ             [ shift and go to state 24 ]
  ! GT              [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GEQ             [ shift and go to state 27 ]
  ! LEQ             [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! COMMA           [ shift and go to state 35 ]


state 46

    (16) expr -> expr LEQ expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 16 (expr -> expr LEQ expr .)
    EQEQ            reduce using rule 16 (expr -> expr LEQ expr .)
    NEQ             reduce using rule 16 (expr -> expr LEQ expr .)
    GT              reduce using rule 16 (expr -> expr LEQ expr .)
    LT              reduce using rule 16 (expr -> expr LEQ expr .)
    GEQ             reduce using rule 16 (expr -> expr LEQ expr .)
    LEQ             reduce using rule 16 (expr -> expr LEQ expr .)
    AND             reduce using rule 16 (expr -> expr LEQ expr .)
    OR              reduce using rule 16 (expr -> expr LEQ expr .)
    PLUS            reduce using rule 16 (expr -> expr LEQ expr .)
    MINUS           reduce using rule 16 (expr -> expr LEQ expr .)
    TIMES           reduce using rule 16 (expr -> expr LEQ expr .)
    DIVIDE          reduce using rule 16 (expr -> expr LEQ expr .)
    COMMA           reduce using rule 16 (expr -> expr LEQ expr .)
    NEWLINE         reduce using rule 16 (expr -> expr LEQ expr .)
    RPAREN          reduce using rule 16 (expr -> expr LEQ expr .)

  ! EQEQ            [ shift and go to state 23 ]
  ! NEQ             [ shift and go to state 24 ]
  ! GT              [ shift and go to state 25 ]
  ! LT              [ shift and go to state 26 ]
  ! GEQ             [ shift and go to state 27 ]
  ! LEQ             [ shift and go to state 28 ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! COMMA           [ shift and go to state 35 ]


state 47

    (17) expr -> expr AND expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 17 (expr -> expr AND expr .)
    AND             reduce using rule 17 (expr -> expr AND expr .)
    OR              reduce using rule 17 (expr -> expr AND expr .)
    PLUS            reduce using rule 17 (expr -> expr AND expr .)
    MINUS           reduce using rule 17 (expr -> expr AND expr .)
    TIMES           reduce using rule 17 (expr -> expr AND expr .)
    DIVIDE          reduce using rule 17 (expr -> expr AND expr .)
    COMMA           reduce using rule 17 (expr -> expr AND expr .)
    NEWLINE         reduce using rule 17 (expr -> expr AND expr .)
    RPAREN          reduce using rule 17 (expr -> expr AND expr .)
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28

  ! EQEQ            [ reduce using rule 17 (expr -> expr AND expr .) ]
  ! NEQ             [ reduce using rule 17 (expr -> expr AND expr .) ]
  ! GT              [ reduce using rule 17 (expr -> expr AND expr .) ]
  ! LT              [ reduce using rule 17 (expr -> expr AND expr .) ]
  ! GEQ             [ reduce using rule 17 (expr -> expr AND expr .) ]
  ! LEQ             [ reduce using rule 17 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! COMMA           [ shift and go to state 35 ]


state 48

    (18) expr -> expr OR expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 18 (expr -> expr OR expr .)
    AND             reduce using rule 18 (expr -> expr OR expr .)
    OR              reduce using rule 18 (expr -> expr OR expr .)
    PLUS            reduce using rule 18 (expr -> expr OR expr .)
    MINUS           reduce using rule 18 (expr -> expr OR expr .)
    TIMES           reduce using rule 18 (expr -> expr OR expr .)
    DIVIDE          reduce using rule 18 (expr -> expr OR expr .)
    COMMA           reduce using rule 18 (expr -> expr OR expr .)
    NEWLINE         reduce using rule 18 (expr -> expr OR expr .)
    RPAREN          reduce using rule 18 (expr -> expr OR expr .)
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28

  ! EQEQ            [ reduce using rule 18 (expr -> expr OR expr .) ]
  ! NEQ             [ reduce using rule 18 (expr -> expr OR expr .) ]
  ! GT              [ reduce using rule 18 (expr -> expr OR expr .) ]
  ! LT              [ reduce using rule 18 (expr -> expr OR expr .) ]
  ! GEQ             [ reduce using rule 18 (expr -> expr OR expr .) ]
  ! LEQ             [ reduce using rule 18 (expr -> expr OR expr .) ]
  ! AND             [ shift and go to state 29 ]
  ! OR              [ shift and go to state 30 ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! COMMA           [ shift and go to state 35 ]


state 49

    (19) expr -> expr PLUS expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 19 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 19 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 19 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 19 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 19 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 19 (expr -> expr PLUS expr .)
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34

  ! EQEQ            [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! NEQ             [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! GT              [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! LT              [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! GEQ             [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! LEQ             [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! AND             [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! OR              [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! TIMES           [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 19 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! COMMA           [ shift and go to state 35 ]


state 50

    (20) expr -> expr MINUS expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 20 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 20 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 20 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 20 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 20 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 20 (expr -> expr MINUS expr .)
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34

  ! EQEQ            [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! NEQ             [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! GT              [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! LT              [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! GEQ             [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! LEQ             [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! AND             [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! OR              [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! TIMES           [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 20 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! COMMA           [ shift and go to state 35 ]


state 51

    (21) expr -> expr TIMES expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 21 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 21 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 21 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 21 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 21 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 21 (expr -> expr TIMES expr .)
    NEWLINE         reduce using rule 21 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 21 (expr -> expr TIMES expr .)
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30

  ! EQEQ            [ reduce using rule 21 (expr -> expr TIMES expr .) ]
  ! NEQ             [ reduce using rule 21 (expr -> expr TIMES expr .) ]
  ! GT              [ reduce using rule 21 (expr -> expr TIMES expr .) ]
  ! LT              [ reduce using rule 21 (expr -> expr TIMES expr .) ]
  ! GEQ             [ reduce using rule 21 (expr -> expr TIMES expr .) ]
  ! LEQ             [ reduce using rule 21 (expr -> expr TIMES expr .) ]
  ! AND             [ reduce using rule 21 (expr -> expr TIMES expr .) ]
  ! OR              [ reduce using rule 21 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! COMMA           [ shift and go to state 35 ]


state 52

    (22) expr -> expr DIVIDE expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    COLON           reduce using rule 22 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 22 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 22 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 22 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 22 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 22 (expr -> expr DIVIDE expr .)
    NEWLINE         reduce using rule 22 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 22 (expr -> expr DIVIDE expr .)
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30

  ! EQEQ            [ reduce using rule 22 (expr -> expr DIVIDE expr .) ]
  ! NEQ             [ reduce using rule 22 (expr -> expr DIVIDE expr .) ]
  ! GT              [ reduce using rule 22 (expr -> expr DIVIDE expr .) ]
  ! LT              [ reduce using rule 22 (expr -> expr DIVIDE expr .) ]
  ! GEQ             [ reduce using rule 22 (expr -> expr DIVIDE expr .) ]
  ! LEQ             [ reduce using rule 22 (expr -> expr DIVIDE expr .) ]
  ! AND             [ reduce using rule 22 (expr -> expr DIVIDE expr .) ]
  ! OR              [ reduce using rule 22 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 31 ]
  ! MINUS           [ shift and go to state 32 ]
  ! TIMES           [ shift and go to state 33 ]
  ! DIVIDE          [ shift and go to state 34 ]
  ! COMMA           [ shift and go to state 35 ]


state 53

    (30) expr -> expr COMMA expr .
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    COLON           reduce using rule 30 (expr -> expr COMMA expr .)
    NEWLINE         reduce using rule 30 (expr -> expr COMMA expr .)
    RPAREN          reduce using rule 30 (expr -> expr COMMA expr .)
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    COMMA           shift and go to state 35

  ! EQEQ            [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! NEQ             [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! GT              [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! LT              [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! GEQ             [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! LEQ             [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! AND             [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! OR              [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! PLUS            [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! MINUS           [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! TIMES           [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! DIVIDE          [ reduce using rule 30 (expr -> expr COMMA expr .) ]
  ! COMMA           [ reduce using rule 30 (expr -> expr COMMA expr .) ]


state 54

    (29) expr -> LPAREN expr RPAREN .

    COLON           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    EQEQ            reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    NEQ             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    GEQ             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    LEQ             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    NEWLINE         reduce using rule 29 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 29 (expr -> LPAREN expr RPAREN .)


state 55

    (10) statement -> FOR ID IN RANGE . LPAREN expr RPAREN COLON NEWLINE block

    LPAREN          shift and go to state 60


state 56

    (7) statement -> PRINT LPAREN expr RPAREN NEWLINE .

    ID              reduce using rule 7 (statement -> PRINT LPAREN expr RPAREN NEWLINE .)
    PRINT           reduce using rule 7 (statement -> PRINT LPAREN expr RPAREN NEWLINE .)
    IF              reduce using rule 7 (statement -> PRINT LPAREN expr RPAREN NEWLINE .)
    FOR             reduce using rule 7 (statement -> PRINT LPAREN expr RPAREN NEWLINE .)
    $end            reduce using rule 7 (statement -> PRINT LPAREN expr RPAREN NEWLINE .)
    ELSE            reduce using rule 7 (statement -> PRINT LPAREN expr RPAREN NEWLINE .)


state 57

    (8) statement -> IF expr COLON NEWLINE block .
    (9) statement -> IF expr COLON NEWLINE block . ELSE COLON NEWLINE block

  ! shift/reduce conflict for ELSE resolved as shift
    ID              reduce using rule 8 (statement -> IF expr COLON NEWLINE block .)
    PRINT           reduce using rule 8 (statement -> IF expr COLON NEWLINE block .)
    IF              reduce using rule 8 (statement -> IF expr COLON NEWLINE block .)
    FOR             reduce using rule 8 (statement -> IF expr COLON NEWLINE block .)
    $end            reduce using rule 8 (statement -> IF expr COLON NEWLINE block .)
    ELSE            shift and go to state 61

  ! ELSE            [ reduce using rule 8 (statement -> IF expr COLON NEWLINE block .) ]


state 58

    (4) block -> statement .
    (2) statement_list -> statement .

  ! reduce/reduce conflict for ELSE resolved using rule 2 (statement_list -> statement .)
  ! reduce/reduce conflict for ID resolved using rule 2 (statement_list -> statement .)
  ! reduce/reduce conflict for PRINT resolved using rule 2 (statement_list -> statement .)
  ! reduce/reduce conflict for IF resolved using rule 2 (statement_list -> statement .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (statement_list -> statement .)
  ! reduce/reduce conflict for $end resolved using rule 2 (statement_list -> statement .)
    ELSE            reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    FOR             reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)

  ! ELSE            [ reduce using rule 4 (block -> statement .) ]
  ! ID              [ reduce using rule 4 (block -> statement .) ]
  ! PRINT           [ reduce using rule 4 (block -> statement .) ]
  ! IF              [ reduce using rule 4 (block -> statement .) ]
  ! FOR             [ reduce using rule 4 (block -> statement .) ]
  ! $end            [ reduce using rule 4 (block -> statement .) ]


state 59

    (5) block -> statement_list .
    (3) statement_list -> statement_list . statement
    (6) statement -> . ID EQUALS expr NEWLINE
    (7) statement -> . PRINT LPAREN expr RPAREN NEWLINE
    (8) statement -> . IF expr COLON NEWLINE block
    (9) statement -> . IF expr COLON NEWLINE block ELSE COLON NEWLINE block
    (10) statement -> . FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    ELSE            reduce using rule 5 (block -> statement_list .)
    $end            reduce using rule 5 (block -> statement_list .)
    ID              shift and go to state 4
    PRINT           shift and go to state 5
    IF              shift and go to state 6
    FOR             shift and go to state 7

  ! ID              [ reduce using rule 5 (block -> statement_list .) ]
  ! PRINT           [ reduce using rule 5 (block -> statement_list .) ]
  ! IF              [ reduce using rule 5 (block -> statement_list .) ]
  ! FOR             [ reduce using rule 5 (block -> statement_list .) ]

    statement                      shift and go to state 8

state 60

    (10) statement -> FOR ID IN RANGE LPAREN . expr RPAREN COLON NEWLINE block
    (11) expr -> . expr EQEQ expr
    (12) expr -> . expr NEQ expr
    (13) expr -> . expr GT expr
    (14) expr -> . expr LT expr
    (15) expr -> . expr GEQ expr
    (16) expr -> . expr LEQ expr
    (17) expr -> . expr AND expr
    (18) expr -> . expr OR expr
    (19) expr -> . expr PLUS expr
    (20) expr -> . expr MINUS expr
    (21) expr -> . expr TIMES expr
    (22) expr -> . expr DIVIDE expr
    (23) expr -> . NUMBER
    (24) expr -> . FLOAT
    (25) expr -> . ID
    (26) expr -> . STRING
    (27) expr -> . TRUE
    (28) expr -> . FALSE
    (29) expr -> . LPAREN expr RPAREN
    (30) expr -> . expr COMMA expr

    NUMBER          shift and go to state 12
    FLOAT           shift and go to state 13
    ID              shift and go to state 14
    STRING          shift and go to state 15
    TRUE            shift and go to state 16
    FALSE           shift and go to state 17
    LPAREN          shift and go to state 18

    expr                           shift and go to state 62

state 61

    (9) statement -> IF expr COLON NEWLINE block ELSE . COLON NEWLINE block

    COLON           shift and go to state 63


state 62

    (10) statement -> FOR ID IN RANGE LPAREN expr . RPAREN COLON NEWLINE block
    (11) expr -> expr . EQEQ expr
    (12) expr -> expr . NEQ expr
    (13) expr -> expr . GT expr
    (14) expr -> expr . LT expr
    (15) expr -> expr . GEQ expr
    (16) expr -> expr . LEQ expr
    (17) expr -> expr . AND expr
    (18) expr -> expr . OR expr
    (19) expr -> expr . PLUS expr
    (20) expr -> expr . MINUS expr
    (21) expr -> expr . TIMES expr
    (22) expr -> expr . DIVIDE expr
    (30) expr -> expr . COMMA expr

    RPAREN          shift and go to state 64
    EQEQ            shift and go to state 23
    NEQ             shift and go to state 24
    GT              shift and go to state 25
    LT              shift and go to state 26
    GEQ             shift and go to state 27
    LEQ             shift and go to state 28
    AND             shift and go to state 29
    OR              shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    COMMA           shift and go to state 35


state 63

    (9) statement -> IF expr COLON NEWLINE block ELSE COLON . NEWLINE block

    NEWLINE         shift and go to state 65


state 64

    (10) statement -> FOR ID IN RANGE LPAREN expr RPAREN . COLON NEWLINE block

    COLON           shift and go to state 66


state 65

    (9) statement -> IF expr COLON NEWLINE block ELSE COLON NEWLINE . block
    (4) block -> . statement
    (5) block -> . statement_list
    (6) statement -> . ID EQUALS expr NEWLINE
    (7) statement -> . PRINT LPAREN expr RPAREN NEWLINE
    (8) statement -> . IF expr COLON NEWLINE block
    (9) statement -> . IF expr COLON NEWLINE block ELSE COLON NEWLINE block
    (10) statement -> . FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement

    ID              shift and go to state 4
    PRINT           shift and go to state 5
    IF              shift and go to state 6
    FOR             shift and go to state 7

    block                          shift and go to state 67
    statement                      shift and go to state 58
    statement_list                 shift and go to state 59

state 66

    (10) statement -> FOR ID IN RANGE LPAREN expr RPAREN COLON . NEWLINE block

    NEWLINE         shift and go to state 68


state 67

    (9) statement -> IF expr COLON NEWLINE block ELSE COLON NEWLINE block .

    ID              reduce using rule 9 (statement -> IF expr COLON NEWLINE block ELSE COLON NEWLINE block .)
    PRINT           reduce using rule 9 (statement -> IF expr COLON NEWLINE block ELSE COLON NEWLINE block .)
    IF              reduce using rule 9 (statement -> IF expr COLON NEWLINE block ELSE COLON NEWLINE block .)
    FOR             reduce using rule 9 (statement -> IF expr COLON NEWLINE block ELSE COLON NEWLINE block .)
    $end            reduce using rule 9 (statement -> IF expr COLON NEWLINE block ELSE COLON NEWLINE block .)
    ELSE            reduce using rule 9 (statement -> IF expr COLON NEWLINE block ELSE COLON NEWLINE block .)


state 68

    (10) statement -> FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE . block
    (4) block -> . statement
    (5) block -> . statement_list
    (6) statement -> . ID EQUALS expr NEWLINE
    (7) statement -> . PRINT LPAREN expr RPAREN NEWLINE
    (8) statement -> . IF expr COLON NEWLINE block
    (9) statement -> . IF expr COLON NEWLINE block ELSE COLON NEWLINE block
    (10) statement -> . FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement

    ID              shift and go to state 4
    PRINT           shift and go to state 5
    IF              shift and go to state 6
    FOR             shift and go to state 7

    block                          shift and go to state 69
    statement                      shift and go to state 58
    statement_list                 shift and go to state 59

state 69

    (10) statement -> FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block .

    ID              reduce using rule 10 (statement -> FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block .)
    PRINT           reduce using rule 10 (statement -> FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block .)
    IF              reduce using rule 10 (statement -> FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block .)
    FOR             reduce using rule 10 (statement -> FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block .)
    $end            reduce using rule 10 (statement -> FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block .)
    ELSE            reduce using rule 10 (statement -> FOR ID IN RANGE LPAREN expr RPAREN COLON NEWLINE block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQEQ in state 53 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 53 resolved as shift
WARNING: shift/reduce conflict for GT in state 53 resolved as shift
WARNING: shift/reduce conflict for LT in state 53 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 53 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 53 resolved as shift
WARNING: shift/reduce conflict for AND in state 53 resolved as shift
WARNING: shift/reduce conflict for OR in state 53 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 53 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 53 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 53 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 53 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 53 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 57 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 59 resolved as shift
WARNING: shift/reduce conflict for IF in state 59 resolved as shift
WARNING: shift/reduce conflict for FOR in state 59 resolved as shift
WARNING: reduce/reduce conflict in state 58 resolved using rule (statement_list -> statement)
WARNING: rejected rule (block -> statement) in state 58
WARNING: Rule (block -> statement) is never reduced
